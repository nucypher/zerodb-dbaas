<html lang="en" metal:use-macro="dashboard">
	<title metal:fill-slot="title">
		Documentation
	</title>
	<div metal:fill-slot="content" class="col-sm-9 content">
		<div class="dashhead">
			<div class="dashhead-titles">
				<h6 class="dashhead-subtitle">Dashboard</h6>
				<h2 class="dashhead-title">Documentation</h2>
			</div>
		</div>

		<div class="hr-divider m-t-md m-b">
			<h3 class="hr-divider-content hr-divider-heading">Documentation</h3>
		</div>

		<div class="section" id="overview">
			<p>ZeroDB is an end-to-end encrypted database. It is based on
			<a class="reference external" href="http://en.wikipedia.org/wiki/Zope_Object_Database">ZODB</a> and written in
			<a class="reference external" href="https://www.python.org/">Python</a> (with some compiled C extensions).</p>
			<p>In ZeroDB, the client is responsible for the database logic. Data encryption,
			decryption, and compression also happen client side. Therefore, the server
			never has any knowledge about the data, its structure, or its order.</p>
			<p>Clients also have an adjustable cache which stores the most-used parts of data
			structures and greatly speeds up queries even when its size is small (e.g. 1
			megabyte).</p>
			<p>From a developer&#8217;s perspective, ZeroDB&#8217;s design is greatly inspired by the
			<a class="reference external" href="https://djangoproject.com">Django</a> ORM and
			<a class="reference external" href="http://www.sqlalchemy.org/">SQLAlchemy</a>.</p>
		</div>

		<div class="section" id="installation">
			<h2>Installation</h2>
			<p>We supply ZeroDB as a Python Package <code class="docutils literal"><span class="pre">zerodb</span></code>, installable via <code class="docutils literal"><span class="pre">pip</span></code>.
			Starting at version 0.99, zerodb asyncio and, hence, requires Python 3.5.</p>
			<div class="section" id="dependencies">
				<h3>Dependencies</h3>
				<p>Firstly, you need Python 3.5. If you are using OS X or Windows, check
				<a class="reference external" href="https://www.python.org">Official Python website</a>.
				If you are using Ubuntu with version earlier than 16.04, you may find useful
				<a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes">Deadsnakes PPA</a>.</p>
				<p>Next, you need to make sure you have pip installed, as well as some dev headers
				and compilers. In Ubuntu:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ sudo apt-get install python3-pip build-essential \
		       python3-dev libffi-dev libssl-dev
					</pre></div>
				</div>
				<p>On some systems you may also need to install <code class="docutils literal"><span class="pre">libzmq-dev</span></code> to get IPython
				working properly.
				With this, you have necessary dependencies. If you want to install only client
				library globally in your system (convenient in Docker images or AWS
				instances):</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ sudo pip3 install zerodb==0.99.0a3
					</pre></div>
				</div>
				<p>If you want to install the server, you can also do:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ sudo pip3 install zerodb-server==0.2.0a2
					</pre></div>
				</div>
				<p>If you install everything on your local machine, you may want to do so in
				virtualenv instead. So, for zerodb server:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ sudo pip3 install virtualenv
$ virtualenv -p python3.5 server_env
$ source server_env/bin/activate
$ pip3 install zerodb-server==0.2.0a2
					</pre></div>
				</div>
			</div>
			<div class="section" id="demo-files">
				<h3>Demo files</h3>
				<p>You can find demo files in <a class="reference external" href="https://github.com/zerodb/zerodb-server/">zerodb-server git repository</a>:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ git clone https://github.com/zerodb/zerodb-server.git
$ cd zerodb-server/demo
					</pre></div>
				</div>
				<p>Optionally, create a virtual environment:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ virtualenv -p python3.5 .demo
					</pre></div>
				</div>
				<p>This creates a fresh virtual environment in the directory <code class="docutils literal"><span class="pre">.demo</span></code>,
				which you can activate using:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ source .demo/bin/activate
					</pre></div>
				</div>
				<p>Install packages necessary for the demo:</p>
				<div class="highlight-default"><div class="highlight"><pre><span></span>$ pip3 install -r requirements.txt
					</pre></div>
				</div>
			</div>

		</div>
		<div class="section" id="using-zerodb-in-python">
			<h2>Using ZeroDB in Python</h2>
			<p>Unlike many NoSQL databases, you still define data models in ZeroDB. However,
			these are only for indexing, and they are dynamically typed. All the fields you
			define in the data models are indexed, but objects which you store in the database
			can contain any fields you want (they just won&#8217;t be indexed).</p>
			<p>Let&#8217;s start by writing a data model in <code class="docutils literal"><span class="pre">demo/models.py</span></code> first:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">zerodb.models</span> <span class="k">import</span> <span class="n">Model</span><span class="p">,</span> <span class="n">Field</span><span class="p">,</span> <span class="n">Text</span>


<span class="k">class</span> <span class="nc">Employee</span><span class="p">(</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
    <span class="n">surname</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">Text</span><span class="p">()</span>
    <span class="n">salary</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
	<span class="k">return</span> <span class="s2">&quot;&lt;</span><span class="si">%s</span><span class="s2"> </span><span class="si">%s</span><span class="s2"> who earns $</span><span class="si">%s</span><span class="s2">&gt;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">surname</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">salary</span><span class="p">)</span>
				</pre></div>
			</div>
			<p>Let&#8217;s assume the database server we started before is still running.
			The simplest example
			which creates records for us would look like this:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">transaction</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">zerodb</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">models</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">db</span> <span class="o">=</span> <span class="n">zerodb</span><span class="o">.</span><span class="n">DB</span><span class="p">((</span><span class="s2">&quot;db.zerodb.com&quot;</span><span class="p">,</span> <span class="mi">8001</span><span class="p">),</span> <span class="n">username</span><span class="o">=</span><span class="s2">&quot;your@email.com&quot;</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s2">&quot;&lt;your passphrase&gt;&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Employee</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="n">surname</span><span class="o">=</span><span class="s2">&quot;Smith&quot;</span><span class="p">,</span> <span class="n">salary</span><span class="o">=</span><span class="mi">150000</span><span class="p">,</span>
<span class="gp">... </span>                    <span class="n">description</span><span class="o">=</span><span class="s2">&quot;Coding power&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">db</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">transaction</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
				</pre></div>
			</div>
			<p>Now, let&#8217;s do something more advanced and populate the database with random
			data using the script <code class="docutils literal"><span class="pre">create.py</span></code>:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">zerodb</span>  <span class="c1"># ZeroDB itself</span>
<span class="kn">import</span> <span class="nn">transaction</span>  <span class="c1"># Transaction manager</span>
<span class="kn">import</span> <span class="nn">models</span>  <span class="c1"># ..and our data model</span>

<span class="c1"># Also we need to generate some random data</span>
<span class="kn">import</span> <span class="nn">names</span>
<span class="kn">import</span> <span class="nn">loremipsum</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="n">username</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
<span class="n">passphrase</span> <span class="o">=</span> <span class="s2">&quot;very insecure passphrase - never use it&quot;</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">zerodb</span><span class="o">.</span><span class="n">DB</span><span class="p">((</span><span class="s2">&quot;db.zerodb.com&quot;</span><span class="p">,</span> <span class="mi">8001</span><span class="p">),</span> <span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">passphrase</span><span class="p">)</span>

<span class="c1"># Everything we record should be within a transaction manager</span>
<span class="c1"># or be ended with transaction.commit()</span>
<span class="k">with</span> <span class="n">transaction</span><span class="o">.</span><span class="n">manager</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">400</span><span class="p">):</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
	    <span class="c1"># Random text generation is slow, so we report</span>
	    <span class="c1"># about progress here</span>
	    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	<span class="n">e</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Employee</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">names</span><span class="o">.</span><span class="n">get_first_name</span><span class="p">(),</span>
			    <span class="n">surname</span><span class="o">=</span><span class="n">names</span><span class="o">.</span><span class="n">get_last_name</span><span class="p">(),</span>
			    <span class="n">salary</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">200000</span><span class="p">),</span>
			    <span class="n">description</span><span class="o">=</span><span class="n">loremipsum</span><span class="o">.</span><span class="n">get_paragraph</span><span class="p">(),</span>
			    <span class="n">extra</span><span class="o">=</span><span class="n">loremipsum</span><span class="o">.</span><span class="n">get_sentence</span><span class="p">())</span>
	<span class="n">db</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>  <span class="c1"># Don&#39;t forget to add created object to the db</span>

    <span class="c1"># One special record</span>
    <span class="n">desc</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;A theoretical physicist, cosmologist,</span>
<span class="s2">author and Director of Research at the Centre for</span>
<span class="s2">Theoretical Cosmology within the University of Cambridge,</span>
<span class="s2">Stephen William Hawking resides in the United Kingdom.&quot;&quot;&quot;</span>
    <span class="n">e</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Employee</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;Stephen&quot;</span><span class="p">,</span> <span class="n">surname</span><span class="o">=</span><span class="s2">&quot;Hawking&quot;</span><span class="p">,</span>
			<span class="n">salary</span><span class="o">=</span><span class="mi">400000</span><span class="p">,</span>
			<span class="n">description</span><span class="o">=</span><span class="n">desc</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>  <span class="c1"># Don&#39;t forget to add created object to the db</span>

<span class="c1"># This is not really necessary</span>
<span class="n">db</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
				</pre></div>
			</div>
			<p>Let&#8217;s play with that data in the Python terminal (or you can write your own
			script). We&#8217;ll need to import <code class="docutils literal"><span class="pre">zerodb</span></code> and query operators from
			<code class="docutils literal"><span class="pre">zerodb.query</span></code> (same syntax as in
			<a class="reference external" href="http://docs.repoze.org/catalog/usage.html#comparators">repoze</a>):</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">zerodb</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">zerodb.query</span> <span class="k">import</span> <span class="o">*</span>
				</pre></div>
			</div>
			<p>And we also import our data models:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">models</span> <span class="k">import</span> <span class="o">*</span>
				</pre></div>
			</div>
			<p>Let&#8217;s connect to the database now:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">db</span> <span class="o">=</span> <span class="n">zerodb</span><span class="o">.</span><span class="n">DB</span><span class="p">((</span><span class="s2">&quot;db.zerodb.com&quot;</span><span class="p">,</span> <span class="mi">8001</span><span class="p">),</span> <span class="n">username</span><span class="o">=</span><span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s2">&quot;root-password&quot;</span><span class="p">)</span>
				</pre></div>
			</div>
			<p>The number of Employees in the database can be determined by just <code class="docutils literal"><span class="pre">len</span></code>:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">db</span><span class="p">[</span><span class="n">Employee</span><span class="p">])</span>
<span class="go">10001</span>
				</pre></div>
			</div>
			<p>Let&#8217;s try a range query. Here we search for the name <em>John</em> and select three of
			the matching items:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">db</span><span class="p">[</span><span class="n">Employee</span><span class="p">]</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="go">[&lt;John Aquirre who earns $147944&gt;, &lt;John Gauthier who earns $169040&gt;, &lt;John</span>
<span class="go">Hefner who earns $25895&gt;]</span>
				</pre></div>
			</div>
			<p>Now, let&#8217;s do another range query and select all <em>Johns</em> who have a salary within
			a certain range:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">rich_johns</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">Employee</span><span class="p">]</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">InRange</span><span class="p">(</span><span class="s2">&quot;salary&quot;</span><span class="p">,</span> <span class="mi">195000</span><span class="p">,</span> <span class="mi">200000</span><span class="p">),</span>
<span class="go">name=&quot;John&quot;)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">rich_johns</span><span class="p">)</span>
<span class="go">5</span>
				</pre></div>
			</div>
			<p>We can also do full-text search:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">from_uk</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">Employee</span><span class="p">]</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Contains</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">,</span> <span class="s2">&quot;United Kingdom&quot;</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">from_uk</span>
<span class="go">[&lt;Stephen Hawking who earns $400000&gt;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span> <span class="n">from_uk</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">description</span>
<span class="go">A theoretical physicist, cosmologist,</span>
<span class="go">author and Director of Research at the Centre for</span>
<span class="go">Theoretical Cosmology within the University of Cambridge,</span>
<span class="go">Stephen William Hawking resides in the United Kingdom.</span>
				</pre></div>
			</div>
			<p>Let&#8217;s remove the record from the last example. We&#8217;ll need the <code class="docutils literal"><span class="pre">transaction</span></code>
			module for that:</p>
			<div class="highlight-default"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">transaction</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">db</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">from_uk</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">transaction</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">db</span><span class="p">[</span><span class="n">Employee</span><span class="p">])</span>
<span class="go">10000</span>
				</pre></div>
			</div>
		</div>
		<div class="section" id="supported-queries">
			<h2>Supported Queries</h2>
			<p>The following comparators can be executed in ZeroDB. Please note that not all of these
			have been optimized/tested for performance yet.</p>
			<dl class="docutils">
				<dt>Contains(index_name, value)</dt>
				<dd>Contains query.</dd>
				<dt>Eq(index_name, value)</dt>
				<dd>Equals query.</dd>
				<dt>NotEq(index_name, value)</dt>
				<dd>Not equal query.</dd>
				<dt>Gt(index_name, value)</dt>
				<dd>Greater than query.</dd>
				<dt>Lt(index_name, value)</dt>
				<dd>Less than query.</dd>
				<dt>Ge(index_name, value)</dt>
				<dd>Greater (or equal) query.</dd>
				<dt>Le(index_name, value)</dt>
				<dd>Less (or equal) query.</dd>
				<dt>DoesNotContain(index_name, value)</dt>
				<dd>Does not contain query</dd>
				<dt>Any(index_name, value)</dt>
				<dd>Any of query.</dd>
				<dt>NotAny(index_name, value)</dt>
				<dd>Not any of query (ie, None of query)</dd>
				<dt>All(index_name, value)</dt>
				<dd>All query.</dd>
				<dt>NotAll(index_name, value)</dt>
				<dd>NotAll query.</dd>
				<dt>InRange(index_name, start, end, start_exclusive=False, end_exclusive=False)</dt>
				<dd>Index value falls within a range.</dd>
				<dt>NotInRange(index_name, start, end, start_exclusive=False, end_exclusive=False)</dt>
				<dd>Index value falls outside a range.</dd>
			</dl>
		</div>

	</div>
</html>

